from collections import deque

N, M, H = map(int, input().split())
tomato = [list(map(int, input().split())) for i in range(N)]
queue = deque([])
dx = [-1, 1, 0, 0, 0, 0]
dy = [0, 0, -1, 1, 0, 0]
dz = [0, 0, 0, 0, -1, 1]
 
result = 0
 
# queue에 처음 받은 토마토의 위치를 append
# n과 m 사용에 유의
for i in range(N):
    for j in range(M):
        for k in range(H):
           if tomato[i][j][k] == 1:
                 queue.append([i, j, k])
 
 
def bfs():
    while queue:
        x, y = queue.popleft()
        for i in range(6):
            nx, ny, nz = dx[i] + x, dy[i] + y, dz[i] + z
            if 0 <= nx < n and 0 <= ny < m and tomato[nx][ny] == 0:
                tomato[nx][ny][nz] = tomato[x][y][z] + 1
                queue.append([nx, ny, nz])
 
 
bfs()
for i in tomato:
    for j in i:
        for k in j:
         if j == 0:
             print(0)
             exit(0)
         result = max(result, max(i))
 
print(result - 1)