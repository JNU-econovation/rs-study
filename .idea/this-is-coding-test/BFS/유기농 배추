from collections import deque
T=int(input())

count=0
for i in range(T):
    N, M, K = map(int, input().split())
    cabbagetrue = [list(map(int, input().split())) for _ in range(K)]
    queue = deque([])

    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
 
    result = 0
    cabbage=[]
 
    for i in range(1):
        for j in range(1):
            x,y=cabbagetrue[i][j]
            cabbage[x][y]=1
    
    def bfs():
        while queue:
            x, y = queue.popleft()
            for i in range(4):
                nx, ny = dx[i] + x, dy[i] + y
                if 0 <= nx < N and 0 <= ny < M and cabbage[nx][ny] == 0:
                    cabbage[nx][ny] = cabbage[x][y] + 1
                    queue.append([nx, ny])
    
    
    bfs()
    for i in range(N):
        for j in range(M):
            if cabbage[i][j]==0:
                cabbage[i][j]=-1
            else:
                count +=1
                bfs(cabbage,i,j)
    
    print(result - 1)